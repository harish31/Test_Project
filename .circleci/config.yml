# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
commands:
  submit:
    description: |
      "Collect data from this job and report to SumoLogic. Note: MUST BE LAST COMMAND IN JOB."
    parameters:
      http-source:
        default: HTTP_SOURCE
        description: Enter the HTTP Source endpoint generated by the Sumologic setup
          wizard.
        type: env_var_name
      path:
        description: absolute or relative path to the logfile you wish to upload.
        type: string
    steps:
    - run:
        command: |
          # Send data to SumoLogic
          curl -s -X POST -T << parameters.path >> $<< parameters.http-source >>
        name: SumoLogic Send Log
        when: always
description: |
  "Report CircleCI job analytics to your SumoLogic dashboard. Website: sumologic.com Repo: https://github.com/CircleCI-Public/sumologic-orb"
examples:
  workflow_collector:
    description: |
      This example workflow shows a typical build, test, and deploy job in a single workflow. By adding the Sumo Logic Orb to the top of our config and including the provided "workflow-collector" job, analytics may be automatically reported to the CircleCI App for Sumo Logic. You must also setup the CircleCI App on Sumo Logic
    usage:
      jobs:
        build:
          docker:
          - image: node
          steps:
          - run: echo "This job represents a typical build job"
        deploy:
          docker:
          - image: node
          steps:
          - run: echo "This job represents a typical deploy job"
        test:
          docker:
          - image: node
          steps:
          - run: echo "This job represents a typical test job"
      orbs:
        sumologic: circleci/sumologic@1.0.0
      version: 2.1
      workflows:
        build-test-and-deploy:
          jobs:
          - sumologic/workflow-collector
          - build
          - test:
              requires:
              - build
          - deploy:
              requires:
              - test
executors:
  default:
    description: |
      Default reporting environment for Sumologic. This is a small Ubuntu based Docker image with a low resource class. Designed to load fast and use few credits.
    docker:
    - image: <<parameters.image>>:<<parameters.tag>>
    parameters:
      image:
        default: cimg/base
        description: Docker image name
        type: string
      tag:
        default: stable
        description: Docker image tag
        type: string
    resource_class: small
jobs:
  workflow-collector:
    description: |
      "Add this job to your workflow qith no require statements. This job will run in parallel with the rest of your workflow for monitoring and will exit when all other jobs have completed."
    executor: default
    parameters:
      circle-token:
        default: CIRCLE_TOKEN
        description: 'Enter your CircleCI Personal Access Token for interacting with
          the API. You may generate one here: https://circleci.com/account/api'
        type: env_var_name
      job-collector:
        default: JOB_HTTP_SOURCE
        description: Enter the HTTP Source endpoint generated by the Sumologic setup
          wizard for Workflows.
        type: env_var_name
      workflow-collector:
        default: WORKFLOW_HTTP_SOURCE
        description: Enter the HTTP Source endpoint generated by the Sumologic setup
          wizard for Workflows.
        type: env_var_name
    steps:
    - jq/install
    - run:
        command: |
          ###############
          # Begin Collecting
          ###############
          DATA_URL="https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/jobs?circle-token=$<< parameters.circle-token >>"
          WF_DATA=$(curl -s "$DATA_URL" | jq '.items')
          WF_LENGTH=$(echo "$WF_DATA" | jq length)
          # GET URL PATH DATA
          VCS_SHORT=$(echo $CIRCLE_BUILD_URL | cut -d"/" -f4)
          case $VCS_SHORT in
            gh)
              VCS=github
              ;;
            bb)
              VCS=bitbucket
              ;;
            *)
              echo "No VCS found. Error" && exit 1
              ;;
          esac
          # Assume the WF is currently running
          WF_FINISHED=false
          echo "Jobs in Workflow: $WF_LENGTH"
          echo
          # Exit if no other jobs in the Workflow.
          if [ "$WF_LENGTH" -lt 2 ];
          then
            echo "Only a single job has been found in the workflow, indicating this reporter is the only job in the pipeline."
            echo "Please add other jobs to the Workflow you wish to collect data on to send to Sumologic"
            exit 1
          fi
          #####################
          ## START MAIN LOOP ##
          #####################
          # Check the status of all jobs in the workflow that are not this job and wait until they have all finished.
          while [ "$WF_FINISHED" = false ]
          do
            WF_DATA=$(curl -s "$DATA_URL" | jq '.items')
            echo "Waiting for other jobs to finish..."
            #####
            # Send Workflow Data to SumoLogic
            #####
            mkdir -p /tmp/sumologic-logs/
            WF_SL_PAYLOAD=$(curl -s "$DATA_URL" | jq '.')
            echo $WF_SL_PAYLOAD > /tmp/sumologic-logs/workflow-collector.json
            curl -s -X POST -T /tmp/sumologic-logs/workflow-collector.json $<< parameters.workflow-collector >>
            # for each job in the workflow fetch the status.
            # the WF_FINISHED will be assumed true unless one of the jobs in the Workflow is still running
            # the flag will then be set back to false.
            WF_FINISHED=true
            i="0"
            ################
            ### JOB LOOP ###
            ################
            while [ $i -lt "$WF_LENGTH" ]
            do
              echo "looping: $i"
              # fetch the job info
              JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
              JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
              JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
              JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
              # Only check the job if it is not this current job
              if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
              then
                echo "This is the reporter job. Skipping"
              else
                # If this job is NOT the current job, check the status
                echo "JOB: $JOB_NAME"
                echo "JOB NUM: $JOB_NUMBER"
                echo "STATUS: $JOB_STATUS"
                ### This section could be used to send data from the job while it is running. Commenting out this section currently to reduce complexity of dashboard. Updates will be sent when the job completes.
                # #####
                # # Send Job Data to SumoLogic
                # #####
                # mkdir -p /tmp/sumologic-logs/
                # ###
                # # Process Job api 1.1 Data
                # ###
                # echo
                # echo "JOB DATA URL:"
                # echo "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER"
                # JOB_DATA_RAW=$(curl -s "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token=$<< parameters.circle-token >>")
                # # removing steps,circle_yml, outcome keys from object while the workflow is incomplete.
                # JOB_DATA_RAW=$(echo $JOB_DATA_RAW | jq 'del(.circle_yml)' | jq 'del(.steps)')
                # # Write the modified data to a file
                # echo $JOB_DATA_RAW > /tmp/sumologic-logs/job-collector.json
                # curl -s -X POST -T /tmp/sumologic-logs/job-collector.json $<< parameters.job-collector >>
                ###
                if [ "$JOB_STATUS" != '"running"' ];
                then
                  echo "Job $CIRCLE_JOB $JOB_NUMBER is complete - $JOB_STATUS"
                else
                  # If it is still running, then mark WF_FINISHED as false.
                  WF_FINISHED=false
                  echo "Setting status of WF_FINISHED to false"
                fi
              fi
              echo "rerunning loop"
              i="$((i+1))"
              echo "increment loop to $i"
              echo " ---------- "
              echo
            done
            echo "Waiting 10 seconds"
            sleep 10
          done
          echo
          ################
          # WF COMPLETE  #
          ################
          echo
          echo "-------------------------------"
          echo "All jobs in Workflow complete."
          echo "Sending final report."
          echo "-------------------------------"
          echo
          echo
          ########################################
          # Send end-of-workflow data to Sumologic
          ########################################
          WF_SL_PAYLOAD=$(curl -s "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID?circle-token=$<< parameters.circle-token >>" | jq '.')
          echo "SENDING FINAL WORKFLOW DATA"
          echo $WF_SL_PAYLOAD
          echo $WF_SL_PAYLOAD > /tmp/sumologic-logs/workflow-collector.json
          curl -s -X POST -T /tmp/sumologic-logs/workflow-collector.json $<< parameters.workflow-collector >>
          ########################################
          # Send end-of-workflow jobs data to Sumologic
          ########################################
          echo "SENDING FINAL JOB INFORMATION"
          i=0
          while [ $i -lt "$WF_LENGTH" ]
            do
              echo "looping: $i"
              # fetch the job info
              JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
              JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
              JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
              JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
              # Only check the job if it is not this current job
              if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
              then
                echo "This is the reporter job. Skipping"
              else
                # If this job is NOT the current job, check the status
                echo "JOB: $JOB_NAME"
                echo "JOB NUM: $JOB_NUMBER"
                echo "STATUS: $JOB_STATUS"
                #####
                # Send Job Data to SumoLogic
                #####
                mkdir -p /tmp/sumologic-logs/
                ###
                # Process Job api 1.1 Data
                ###
                JOB_DATA_RAW=$(curl -s "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token=$<< parameters.circle-token >>")
                # removing steps and circle_yml keys from object
                JOB_DATA_RAW=$(echo $JOB_DATA_RAW | jq 'del(.circle_yml)' | jq 'del(.steps)')
                # manually set job name as it is currently null
                JOB_DATA_RAW=$(echo $JOB_DATA_RAW | jq --arg JOBNAME "$JOB_NAME" '.job_name = $JOBNAME')
                # Write the modified data to a file
                echo $JOB_DATA_RAW > /tmp/sumologic-logs/job-collector.json
                curl -s -X POST -T /tmp/sumologic-logs/job-collector.json $<< parameters.job-collector >>
                ###
              fi
              echo "rerunning loop"
              i="$((i+1))"
              echo "increment loop to $i"
              echo " ---------- "
              echo
            done
            echo "Complete. You may now find your logs on Sumologic."
        name: Workflow Collector
orbs:
  jq: circleci/jq@1.9.0
version: 2.1
